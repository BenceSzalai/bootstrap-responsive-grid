// Based on Bootstrap scss/_grid.scss
// This file replaces the original file, so it need to contain both the
// changed and unchanged parts.

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
  // Single container class with breakpoint max-widths
  .container,
  // 100% wide container at all breakpoints
  .container-fluid,
  // Breakpoint dependent fluid containers
  .container-sm,
  .container-md,
  .container-lg,
  .container-xl
  {
    @include make-container();
    padding-right: map-get($grid-container-margins, 'xs');
    padding-left: map-get($grid-container-margins, 'xs');
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint, $container-max-width in $container-max-widths {
    $margin_breakpoint: breakpoint-effective( $breakpoint, $grid-container-margins );

    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
        padding-right: map-get($grid-container-margins, $margin_breakpoint);
        padding-left: map-get($grid-container-margins, $margin_breakpoint);
      }

      // Extend each breakpoint which is smaller or equal to the current breakpoint
      $extend-breakpoint: true;

      @each $name, $width in $grid-breakpoints {
        @if ($extend-breakpoint) {
          .container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          // Once the current breakpoint is reached, stop extending
          @if ($breakpoint == $name) {
            $extend-breakpoint: false;
          }
        }
      }
    }
  }
}


// Row
//
// Rows contain your columns.

@if $enable-grid-classes {
  .row {
    @include make-row();
    margin-right: - map-get($grid-container-margins, 'xs');
    margin-left: - map-get($grid-container-margins, 'xs');
  }

  @each $breakpoint, $width in $grid-breakpoints {
    $margin_breakpoint: breakpoint-effective($breakpoint, $grid-gutter-widths);
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      $gutter_compensation: map-get($grid-gutter-widths, $margin_breakpoint) / 2;
      .row {
        margin-right: - $gutter_compensation;
        margin-left: - $gutter_compensation;
      }
    }
  }

  .row-fluid {
    margin-right: - map-get($grid-container-margins, 'xs');
    margin-left: - map-get($grid-container-margins, 'xs');
  }

  // Remove the negative margin from default .row, then the horizontal padding
  // from all immediate children columns (to prevent runaway style inheritance).
  .no-gutters {
    margin-right: 0;
    margin-left: 0;

    > .col,
    > [class*="col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
  @include make-grid-columns();
}
