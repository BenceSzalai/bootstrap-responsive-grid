// Based on Bootstrap scss/mixins/_grid-framework.scss
// These mixins override the default Bootstrap mixins of matching name.
// Other mixins from the same file are still needed, so the original file
// is required.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints); //null, -sm, -md, etc.

    @if $columns > 0 {
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      $gutter_breakpoint: breakpoint-effective( $breakpoint, $grid-gutter-widths );

      .col,
      .col-auto {
        padding-right: map-get($grid-gutter-widths, $gutter_breakpoint) / 2;
        padding-left: map-get($grid-gutter-widths, $gutter_breakpoint) / 2;
      }

      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
        padding-right: map-get($grid-gutter-widths, $gutter_breakpoint) / 2;
        padding-left: map-get($grid-gutter-widths, $gutter_breakpoint) / 2;
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i); // sets the max with and flex size
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto(); // sets width and flex size to auto
        padding-right: map-get($grid-gutter-widths, $gutter_breakpoint) / 2;
        padding-left: map-get($grid-gutter-widths, $gutter_breakpoint) / 2;
      }

      @if $columns > 0 {
        %grid-column#{$infix} {
          padding-right: map-get($grid-gutter-widths, $gutter_breakpoint) / 2;
          padding-left: map-get($grid-gutter-widths, $gutter_breakpoint) / 2;
        }
        $previous-breakpoints: breakpoints-up-to($breakpoint);
        @each $previous-breakpoint in map-keys($previous-breakpoints) {
          $infix2: breakpoint-infix($previous-breakpoint, $breakpoints); //null, -sm, -md, etc.
          @debug $infix2;
          @for $i from 1 through $columns {
            .col#{$infix2}-#{$i} {
              @extend %grid-column#{$infix};
            }
          }
        }

        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns); // sets the max with and flex size
          }
        }
      }

      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }

      @if $columns > 0 {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}
